  
 SCAN:  
#include <stdio.h>
#include <stdlib.h>

int absoluteValue(int x) {
    return (x >= 0) ? x : -x;
}

int main() {
    int max_range, initial, n, i, j, seek = 0, temp;
    int left[100], right[100];
    int left_count = 0, right_count = 0;

    // Input for max range of the disk (total number of cylinders)
    printf("ENTER max range (e.g., 200): ");
    scanf("%d", &max_range);

    // Input for the number of requests
    printf("ENTER number of requests: ");
    scanf("%d", &n);

    // Input for the initial head position
    printf("Enter initial head position: ");
    scanf("%d", &initial);

    // Array for disk requests
    int arr[n];

    // Input for the disk request positions
    printf("ENTER request positions: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Divide the requests into left and right based on the head position
    for (i = 0; i < n; i++) {
        if (arr[i] < initial) {
            left[left_count++] = arr[i];
        } else {
            right[right_count++] = arr[i];
        }
    }

    // Sort the left array in descending order (to simulate the head moving left)
    for (i = 0; i < left_count - 1; i++) {
        for (j = i + 1; j < left_count; j++) {
            if (left[i] < left[j]) {
                temp = left[i];
                left[i] = left[j];
                left[j] = temp;
            }
        }
    }

    // Sort the right array in ascending order (to simulate the head moving right)
    for (i = 0; i < right_count - 1; i++) {
        for (j = i + 1; j < right_count; j++) {
            if (right[i] > right[j]) {
                temp = right[i];
                right[i] = right[j];
                right[j] = temp;
            }
        }
    }

    // Now, perform the SCAN algorithm: Move left to right and right to left

    // Move towards the right first (to the maximum end)
    for (i = 0; i < right_count; i++) {
        seek += absoluteValue(initial - right[i]);
        printf("Disk head moves from %d to %d with seek %d\n", initial, right[i], absoluteValue(initial - right[i]));
        initial = right[i];
    }

    // After reaching the maximum range, reverse direction to the leftmost request
    seek += absoluteValue(initial - max_range);  // Move to the maximum range (end of disk)
    printf("Disk head moves from %d to %d with seek %d\n", initial, max_range, absoluteValue(initial - max_range));
    initial = max_range;

    // Now, move towards the left (to the minimum end)
    for (i = 0; i < left_count; i++) {
        seek += absoluteValue(initial - left[i]);
        printf("Disk head moves from %d to %d with seek %d\n", initial, left[i], absoluteValue(initial - left[i]));
        initial = left[i];
    }

    // Output the total seek distance
    printf("Total seek distance: %d\n", seek);

    return 0;
}
OUTPUT:
ENTER max range (e.g., 200): 200
ENTER number of requests: 8
Enter initial head position: 50
ENTER request positions: 180 34 119 10 60 70 175 100
Disk head moves from 50 to 60 with seek 10
Disk head moves from 60 to 70 with seek 10
Disk head moves from 70 to 100 with seek 30
Disk head moves from 100 to 119 with seek 19
Disk head moves from 119 to 175 with seek 56
Disk head moves from 175 to 180 with seek 5
Disk head moves from 180 to 200 with seek 20
Disk head moves from 200 to 34 with seek 166
Disk head moves from 34 to 10 with seek 24
Total seek distance: 340





FCFS:
#include <stdio.h>
int absoluteValue(int x){
    return (x>=0)?x:-x;
}
int main()
{
    int n,i,initial,seek=0,difference;
    printf("Enter no of requests");
    scanf("%d",&n);
    printf("Enter initial head position");
    scanf("%d",&initial);
    int queue[n];
    printf("enter the requests");
    for(i=0;i<n;i++)
    {
        scanf("%d",&queue[i]);
    }
    int currentposition=initial;
    for(i=0;i<n;i++)
    {
        difference=absoluteValue(currentposition-queue[i]);
        seek=seek+difference;
        printf("Disk head moves from %d to %d with seektime %d\n",currentposition,queue[i],difference);
        currentposition=queue[i];
    }
    printf("Total Head Movement=%d",seek);
    return 0;
}
output:
Enter initial head position50
enter the requests45
60
70
30
55
Disk head moves from 50 to 45 with seektime 5
Disk head moves from 45 to 60 with seektime 15
Disk head moves from 60 to 70 with seektime 10
Disk head moves from 70 to 30 with seektime 40
Disk head moves from 30 to 55 with seektime 25
Total Head Movement=95
